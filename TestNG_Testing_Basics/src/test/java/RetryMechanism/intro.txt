Lets say I have 10 TCs, out of which 4 TCs are getting failed, while the rest are getting passed.
But I want to give them one more chance to execute them before actually failing them.

This is known as Retry Mechanism.

These issues can be quite intermittent, such as Browser got crashed, Taking a bit more time to load.

In TestNG, there is a listener available "IRetryAnalyzer". Using that we will retry the failure test cases.

I will provide counter = 3;

Then each failure test cases will be executed a maximum of 3 times.
If they got passed in that time, the ultimate result will be PASSED.

We can apply retry mechanism at :-

1. @Test level -> Using IRetryAnalyzer interface
2. At runtime -> Using IAnnotationTransformer Interface (Best Approach)

What actually happens behind the scenes when we apply listener during run-time ?

-> We have 100 Tcs, out of which 30 got failed.
My "RetyAnnotationTransform" class will read these 30 test cases at the run time.
And for each of the test cases, "RetyAnnotationTransform" class will invoke the "transform" method inside it.
Inside "transform" method, we passing the location of the "RetryAnalyzer" class.
So we will go to "RetryAnalyzer" class, and we will check what is the maxLimit.
If the counter is < retryLimit, we will re-execute the test case else mark it as failed. 

If the Test case gets passed, in the first attempt, the retry mechanism will not be executed 
