During Parallel Execution, lets say we have 2 concurrent threads trying to access the same WebDriver instance.
This will definately leads to some stablity issues.
Its like 2 Threads trying to access the Critical Section of the Code at the same time.
Since WebDriver is a shared object. If one thread has gotten the CPU Resource and executed some part of the code.
Another thread when gotten the CPU resource might impact the driver and make the test case failed.

** Note **
Thread Local will make sure each thread has its own independent WebDriver instance.

Consider an example :-

Thread 1 gotten the CPU resource :-
-----------------------------------
made driver as chrome driver and launched a WebPage and from there went to the Login Page.
It has entered the userEmail, but before entering the password, CONTEXT SWITCH happens.

Now THread 2 gotten the CPU resource :-
-------------------------------------
made the same driver as edge driver and launched a different page called Registration.

Now again THread1 got the CPU :-
-----------------------------
At this point the WebDriver instance is having EdgeDriver object.
And using the edge driver it will try to perform action on Chrome Browser. (Since T1 is running on Chrome)

So these kind of Issues are quite common.
To handle this THread Local comes into picture.

We will put the original driver into the thread local object.
Whichever thread puts the original driver instance into the threadlocal object.
A mapping is being made internally in the thread local object which stores the current thread ID and copy of Webdriver instance.

And whenever a thread is accessing a driver we will capture the driver from the thread local object. 
By doing so, we are actually getting local driver of the original driver.
Now lets say another THread comes into play, it will also capture the driver from the thread local object , 
this thread will receive another local driver of the original WebDriver instance.

Now 2 threads are executing parallely both having their own independent copies of driver.
Meaning one thread will now not impact the other thread as they have their own seperate copies of driver.

-------------------
Best example :-
-------------------

WebDriver driver;

T1 executes
------------
driver = new ChromeDriver();
tLocal.set(driver)

T2 executes
------------
driver = new EdgeDriver();
tLocal.set(driver);

T3 executes
-------------
driver = new ChromeDriver();
tLocal.set(driver);


In the tLocal object the mapping will be :-

T1_ID : chromeDriverInstance
T2_ID : edgeDriverInstance
t3_ID : chromeDriverInstance

All the threads are working on independent WebDriver instances.
The threads will not bother one another.

** Note **

T1 and T3 are having separate Chrome Driver instances.